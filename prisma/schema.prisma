// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

// Collection of users for a specific Secret Santa event
// TODO: decide if we want to allow multiple events per group or just recreate the group every year
model Group {
    id          String      @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    status      GroupStatus @default(PRE_DRAW)

    // TODO: decide what we want to do if the admin leaves the group or deletes their account
    admin   User   @relation(fields: [adminId], references: [id], name: "group_admin", onDelete: Cascade)
    adminId String

    users       User[]
    invitations Invitation[]
    messages    Message[]
}

model Invitation {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    expiresAt DateTime?

    group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    groups             Group[]
    administeredGroups Group[]   @relation("group_admin")
    Message            Message[]
}

model Message {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String

    group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId String

    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum GroupStatus {
    PRE_DRAW
    POST_DRAW
}
